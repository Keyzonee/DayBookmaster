/*
 * This file was last modified at 2022.03.23 22:47 by Victor N. Skurikhin.
 * This is free and unencumbered software released into the public domain.
 * For more information, please refer to <http://unlicense.org>
 * build.gradle
 * $Id$
 */

import java.util.regex.Matcher
import java.util.regex.Pattern


//file:noinspection GradlePackageUpdate

buildscript {
    def liquibase_gradle_plugin = System.getProperty('VERSION_LIQUIBASE_GRADLE_PLUGIN') ?: VERSION_LIQUIBASE_GRADLE_PLUGIN
    def liquibase = System.getProperty('VERSION_ORG_LIQUIBASE') ?: VERSION_ORG_LIQUIBASE
    dependencies {
        classpath("org.liquibase:liquibase-gradle-plugin:${liquibase_gradle_plugin}") {
            exclude(module: 'liquibase-core')
        }
        classpath "org.liquibase:liquibase-core:${liquibase}"
    }
}

plugins {
    id 'io.quarkus'
    id 'java'
    id 'org.liquibase.gradle' version '2.1.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

static def getEnv(key, defaultValue) {
    return System.getenv(key) ?: defaultValue
}

ext.libVers = [
        drv_org_postgresql          : getEnv('VERSION_DRV_ORG_POSTGRESQL', VERSION_DRV_ORG_POSTGRESQL),
        liquibase                   : getEnv('VERSION_ORG_LIQUIBASE', VERSION_ORG_LIQUIBASE),
        liquibase_gradle_plugin     : getEnv('VERSION_LIQUIBASE_GRADLE_PLUGIN', VERSION_LIQUIBASE_GRADLE_PLUGIN),
        liquibase_groovy_dsl        : getEnv('VERSION_LIQUIBASE_GROOVY_DSL', VERSION_LIQUIBASE_GROOVY_DSL),
        slf4j                       : getEnv('VERSION_ORG_SLF4J_VERSION', VERSION_ORG_SLF4J_VERSION),
        google_collections          : '1.0',
        jsr305                      : '1.3.9',
        mockito_core                : '3.2.4',
]

dependencies {
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'
    implementation 'io.quarkus:quarkus-reactive-pg-client'
    implementation 'io.quarkus:quarkus-vertx'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-arc'
    implementation "io.netty:netty-transport-native-epoll:4.1.69.Final:linux-x86_64"
    implementation "io.netty:netty-transport-native-kqueue:4.1.69.Final:osx-x86_64"
    implementation "com.google.code.findbugs:jsr305:$libVers.jsr305"
    implementation "com.google.collections:google-collections:$libVers.google_collections"

    liquibaseRuntime group: 'org.slf4j', name: 'slf4j-api', version: libVers.slf4j
    liquibaseRuntime group: 'org.slf4j', name: 'slf4j-simple', version: libVers.slf4j
    liquibaseRuntime group: 'org.liquibase', name: 'liquibase-core', version: libVers.liquibase
    liquibaseRuntime group: 'org.liquibase', name: 'liquibase-gradle-plugin', version: libVers.liquibase_gradle_plugin
    liquibaseRuntime group: 'org.postgresql', name: 'postgresql', version: libVers.drv_org_postgresql

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: libVers.mockito_core
}

def schemaName = 'db'
def db_url = getEnv('DBURL', DATABASE_URL)
def db_username = getEnv('DBUSER', DATABASE_USERNAME)
def db_password = getEnv('DBPASS', DATABASE_PASSWORD)
def db_url_public = db_url + '?currentSchema=public'
def run_list = project.properties['runList'] ?: 'db'
def projectDir = project.projectDir.toString()
def resourcesDb = 'src/main/resources/db'
def resourcesDbPath = "${projectDir}/${resourcesDb}"
def dbMigrationResourcesDbPath = "./${resourcesDb}"

liquibase {
    activities {
        db {
            changeLogFile "${dbMigrationResourcesDbPath}/changelog/db/Change-Log.xml"
            url db_url_public
            defaultSchemaName 'public'
            username db_username
            password db_password
            classpath "$rootDir"
        }
    }
    runList = run_list
}

group 'su.svn'
version '3.0'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

quarkusBuild {
    nativeArgs {
        containerBuild = true
        buildImage = "quay.io/quarkus/ubi-quarkus-native-image:21.3.0-java11"
    }
}


def getProjectProperty(key, defaultValue) {
    return project.getProperties().get(key) ?: defaultValue
}

static String getLastVersion(String content) {
    String regex = "--changeset[\\s]+[^\\s]+:(\\d+)";
    Matcher matcher = Pattern.compile(regex).matcher(content);

    while (matcher.find()) {
        return Integer.valueOf(matcher.group(1)) + 1
    }
    return "1";
}

// номер changeset всегда должен быть уникальным!!!
static def getLastVersionFile(String folder) {

    def files = new File(folder).listFiles()?.sort { it.getName() }
    def file = files.size() > 0 ? files?.last() : null
    if (Objects.isNull(file)) {
        return "1"
    }

    String fileContents = file.getText('UTF-8')
    return getLastVersion(fileContents)
}

task generate() {
    doLast {
        println(resourcesDbPath)

        def task = this.getProjectProperty('task', 'issue_1')
        def desc = this.getProjectProperty('desc', 'migration')
        def scriptName = "${task}_${desc}"

        def folderPath = "${resourcesDbPath}/changelog/${schemaName}/Change-Sets"
        def version = getLastVersionFile(folderPath + "/")
        def date = new Date()
        def formattedDate = date.format("yyyy_MM_dd")
        def formattedTime = date.format("HH_mm_ss")
        def fileName = "${version}_date_${formattedDate}_time_${formattedTime}_${scriptName}.sql"
        def filePath = "${folderPath}/${fileName}"
        def logicalFilePath = "${resourcesDb}/changelog/${schemaName}/Change-Sets/${fileName}"

        def changeSetAuthor = java.util.Optional
                .ofNullable(System.getProperty("username"))
                .orElse(System.getenv("USER"))

        List<String> sample = [
                '--liquibase formatted sql', '--','', '--',
                "--changeset ${changeSetAuthor}:${version} failOnError:true logicalFilePath:${logicalFilePath}",
                '--', '', '--',
                '-- << COMMAND HERE >>', '--', '',
                '--', '--rollback',
                ''] as String[]
        // create the file and write text to it.
        def file = new File(filePath)
        file.text = sample.join("\n")
        println "File created ${file.getAbsolutePath()}"
    }
}
